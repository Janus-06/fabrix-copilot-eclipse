package com.fabrix.copilot.ui;

import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.custom.StyleRange;
import org.eclipse.swt.events.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.ui.part.ViewPart;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import org.eclipse.jface.text.ITextSelection;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.window.Window;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.ui.texteditor.ITextEditor;

import com.fabrix.copilot.core.*;
import com.fabrix.copilot.agents.*;
import com.fabrix.copilot.utils.*;
import com.fabrix.copilot.mcp.McpServerManager;

import java.util.*;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.nio.file.*;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.stream.Collectors;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;

/**
 * ü§ñ ChatView - ÏôÑÏ†ÑÌûà Í∞úÏÑ†Îêú AI Assistant UI
 * 
 * Î™®Îì† Í∏∞Îä•Ïù¥ Íµ¨ÌòÑÎêòÍ≥† ÏïàÏ†ïÌôîÎêú Ï±ÑÌåÖ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
 */
public class ChatView extends ViewPart {
    
    public static final String ID = "com.fabrix.copilot.views.chatView";
    
    // UI Ïª¥Ìè¨ÎÑåÌä∏Îì§
    private Composite mainComposite;
    private Composite headerComposite;
    private Composite chatComposite;
    private Composite inputComposite;
    
    // Ìó§Îçî
    private Label titleLabel;
    private Label statusLabel;
    private Combo modelCombo;
    private Button settingsButton;
    private Button mcpButton;
    
    // Ï±ÑÌåÖ
    private ScrolledComposite chatScrolled;
    private Composite chatContent;
    private ToolBar chatToolBar;
    private ToolItem clearChatItem;
    private ToolItem exportChatItem;
    private ToolItem attachCodeItem;
    private ToolItem newConvItem;
    private ToolItem historyBtn;
    private ToolItem snippetBtn;
    
    // ÏûÖÎ†•
    private StyledText inputText;
    private Button sendButton;
    private Label characterCountLabel;
    private Combo codeAttachCombo;
    
    // ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ
    private LLMClient llmClient;
    private PreferenceManager preferenceManager;
    private ConversationManager conversationManager;
    private AgentOrchestrator agentOrchestrator;
    private SnippetManager snippetManager;
    private EnhancedContextCollector contextCollector;
    private String currentSessionId;
    private boolean isProcessing = false;
    private Map<String, ModelInfo> modelMap = new HashMap<>();
    private String attachedCode = "";
    
    @Override
    public void createPartControl(Composite parent) {
        parent.setLayout(new GridLayout(1, false));
        
        initializeComponents();
        createMainLayout(parent);
        createHeader();
        createChatArea();
        createInputArea();
        loadInitialData();
        
        CopilotLogger.info("ChatView initialized successfully");
    }
    
    private void initializeComponents() {
        this.preferenceManager = PreferenceManager.getInstance();
        this.llmClient = LLMClient.getInstance();
        this.conversationManager = ConversationManager.getInstance();
        this.agentOrchestrator = new AgentOrchestrator();
        this.snippetManager = new SnippetManager();
        this.contextCollector = new EnhancedContextCollector();
        this.currentSessionId = conversationManager.startNewConversation();
    }
    
    private void createMainLayout(Composite parent) {
        mainComposite = new Composite(parent, SWT.NONE);
        mainComposite.setLayout(new GridLayout(1, false));
        mainComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
        
        GridLayout mainLayout = new GridLayout(1, false);
        mainLayout.marginWidth = 0;
        mainLayout.marginHeight = 0;
        mainLayout.verticalSpacing = 1;
        mainComposite.setLayout(mainLayout);
    }
    
    private void createHeader() {
        headerComposite = new Composite(mainComposite, SWT.NONE);
        headerComposite.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
        headerComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
        
        GridLayout headerLayout = new GridLayout(5, false);
        headerLayout.marginHeight = 10;
        headerLayout.marginWidth = 15;
        headerLayout.horizontalSpacing = 10;
        headerComposite.setLayout(headerLayout);
        
        // Ï†úÎ™©
        titleLabel = new Label(headerComposite, SWT.NONE);
        titleLabel.setText("ü§ñ Multi-Agent REACT");
        titleLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
        titleLabel.setFont(new Font(Display.getDefault(), "Segoe UI", 12, SWT.BOLD));
        
        // ÏÉÅÌÉú
        statusLabel = new Label(headerComposite, SWT.NONE);
        statusLabel.setText("Ready");
        statusLabel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        updateConnectionStatus();
        
        // Î™®Îç∏ ÏÑ†ÌÉù
        modelCombo = new Combo(headerComposite, SWT.READ_ONLY);
        modelCombo.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false));
        modelCombo.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                handleModelSelection();
            }
        });
        loadAvailableModels();
        
        // MCP Î≤ÑÌäº
        mcpButton = new Button(headerComposite, SWT.PUSH);
        mcpButton.setText("üîå MCP");
        mcpButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                openMCPDialog();
            }
        });
        
        // ÏÑ§Ï†ï Î≤ÑÌäº
        settingsButton = new Button(headerComposite, SWT.PUSH);
        settingsButton.setText("‚öôÔ∏è Settings");
        settingsButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                openSettingsDialog();
            }
        });
    }
    
    private void createChatArea() {
        chatComposite = new Composite(mainComposite, SWT.NONE);
        chatComposite.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
        chatComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
        
        GridLayout chatLayout = new GridLayout(1, false);
        chatLayout.marginWidth = 0;
        chatLayout.marginHeight = 0;
        chatComposite.setLayout(chatLayout);
        
        createChatToolbar();
        createScrolledChatArea();
        addWelcomeMessage();
    }
    
    private void createChatToolbar() {
        chatToolBar = new ToolBar(chatComposite, SWT.FLAT | SWT.RIGHT);
        chatToolBar.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
        chatToolBar.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        
        // ÎåÄÌôî Í¥ÄÎ¶¨ Î≤ÑÌäºÎì§
        newConvItem = new ToolItem(chatToolBar, SWT.PUSH);
        newConvItem.setText("üÜï");
        newConvItem.setToolTipText("ÏÉà ÎåÄÌôî ÏãúÏûë");
        newConvItem.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                startNewConversation();
            }
        });
        
        historyBtn = new ToolItem(chatToolBar, SWT.PUSH);
        historyBtn.setText("üìã");
        historyBtn.setToolTipText("ÎåÄÌôî Ïù¥Î†•");
        historyBtn.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                showConversationHistory();
            }
        });
        
        snippetBtn = new ToolItem(chatToolBar, SWT.PUSH);
        snippetBtn.setText("üìå");
        snippetBtn.setToolTipText("ÏΩîÎìú Ïä§ÎãàÌé´");
        snippetBtn.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                openSnippetDialog();
            }
        });
        
        new ToolItem(chatToolBar, SWT.SEPARATOR);
        
        attachCodeItem = new ToolItem(chatToolBar, SWT.PUSH);
        attachCodeItem.setText("üìé Code");
        attachCodeItem.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                attachCurrentCode();
            }
        });
        
        exportChatItem = new ToolItem(chatToolBar, SWT.PUSH);
        exportChatItem.setText("üíæ Export");
        exportChatItem.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                exportChatHistory();
            }
        });
        
        clearChatItem = new ToolItem(chatToolBar, SWT.PUSH);
        clearChatItem.setText("üóëÔ∏è Clear");
        clearChatItem.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                clearChatHistory();
            }
        });
    }
    
    private void createScrolledChatArea() {
        chatScrolled = new ScrolledComposite(chatComposite, SWT.V_SCROLL | SWT.H_SCROLL);
        chatScrolled.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
        chatScrolled.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
        chatScrolled.setExpandHorizontal(true);
        chatScrolled.setExpandVertical(true);
        
        chatContent = new Composite(chatScrolled, SWT.NONE);
        chatContent.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
        
        GridLayout contentLayout = new GridLayout(1, false);
        contentLayout.marginWidth = 15;
        contentLayout.marginHeight = 15;
        contentLayout.verticalSpacing = 10;
        chatContent.setLayout(contentLayout);
        
        chatScrolled.setContent(chatContent);
        chatScrolled.setMinSize(chatContent.computeSize(SWT.DEFAULT, SWT.DEFAULT));
        
        chatScrolled.addControlListener(new ControlAdapter() {
            @Override
            public void controlResized(ControlEvent e) {
                Rectangle r = chatScrolled.getClientArea();
                chatScrolled.setMinSize(chatContent.computeSize(r.width, SWT.DEFAULT));
            }
        });
    }
    
    private void createInputArea() {
        inputComposite = new Composite(mainComposite, SWT.NONE);
        inputComposite.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
        inputComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
        
        GridLayout inputLayout = new GridLayout(1, false);
        inputLayout.marginHeight = 10;
        inputLayout.marginWidth = 15;
        inputLayout.verticalSpacing = 5;
        inputComposite.setLayout(inputLayout);
        
        createInputText();
        createCodeAttachCombo();
        createSendArea();
    }
    
    private void createInputText() {
        inputText = new StyledText(inputComposite, SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
        inputText.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
        inputText.setFont(new Font(Display.getDefault(), "Segoe UI", 10, SWT.NORMAL));
        inputText.setWordWrap(true);
        
        GridData inputData = new GridData(SWT.FILL, SWT.FILL, true, true);
        inputData.heightHint = 60;
        inputText.setLayoutData(inputData);
        inputText.setMargins(10, 10, 10, 10);
        
        // ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî Ï†úÍ±∞
        inputText.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (inputText.getText().equals("ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî...")) {
                    inputText.setText("");
                }
            }
        });
        
        inputText.addModifyListener(e -> updateCharacterCount());
        
        inputText.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if ((e.stateMask & SWT.CTRL) != 0 && e.keyCode == SWT.CR) {
                    e.doit = false;
                    sendMessage();
                }
            }
        });
    }
    
    private void createCodeAttachCombo() {
        Composite codeComposite = new Composite(inputComposite, SWT.NONE);
        codeComposite.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
        codeComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        
        GridLayout codeLayout = new GridLayout(2, false);
        codeLayout.marginWidth = 0;
        codeLayout.marginHeight = 5;
        codeLayout.horizontalSpacing = 5;
        codeComposite.setLayout(codeLayout);
        
        // ÏΩîÎìú Ï≤®Î∂Ä ÏÉÅÌÉú ÌëúÏãú ÏòÅÏó≠
        Composite attachStatusComposite = new Composite(codeComposite, SWT.NONE);
        attachStatusComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        attachStatusComposite.setLayout(new GridLayout(3, false));
        
        Label attachIcon = new Label(attachStatusComposite, SWT.NONE);
        attachIcon.setText("üìé");
        
        attachStatusLabel = new Label(attachStatusComposite, SWT.NONE);
        attachStatusLabel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        attachStatusLabel.setText("ÏΩîÎìú Ï≤®Î∂Ä ÏóÜÏùå");
        attachStatusLabel.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_DARK_GRAY));
        
        // Ï≤®Î∂ÄÎêú ÏΩîÎìú Ï†úÍ±∞ Î≤ÑÌäº (Ï¥àÍ∏∞ÏóêÎäî Ïà®ÍπÄ)
        clearAttachButton = new Button(attachStatusComposite, SWT.PUSH);
        clearAttachButton.setText("‚úï");
        clearAttachButton.setToolTipText("Ï≤®Î∂Ä Ï†úÍ±∞");
        clearAttachButton.setVisible(false);
        clearAttachButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                clearAttachedCode();
            }
        });
        
        // ÏΩîÎìú Ï≤®Î∂Ä Î≤ÑÌäº Í∑∏Î£π
        Composite buttonComposite = new Composite(codeComposite, SWT.NONE);
        buttonComposite.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false));
        buttonComposite.setLayout(new GridLayout(4, false));
        
        // Îπ†Î•∏ Ï≤®Î∂Ä Î≤ÑÌäºÎì§
        Button attachSelectionBtn = new Button(buttonComposite, SWT.PUSH);
        attachSelectionBtn.setText("ÏÑ†ÌÉù ÏòÅÏó≠");
        attachSelectionBtn.setToolTipText("ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏΩîÎìú Ï≤®Î∂Ä");
        attachSelectionBtn.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                attachCurrentSelection();
            }
        });
        
        Button attachFileBtn = new Button(buttonComposite, SWT.PUSH);
        attachFileBtn.setText("ÌòÑÏû¨ ÌååÏùº");
        attachFileBtn.setToolTipText("ÌòÑÏû¨ Ïó¥Î¶∞ ÌååÏùº Ï†ÑÏ≤¥ Ï≤®Î∂Ä");
        attachFileBtn.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                attachCurrentFile();
            }
        });
        
        // ÌååÏùº ÏÑ†ÌÉù ÏΩ§Î≥¥Î∞ïÏä§
        codeAttachCombo = new Combo(buttonComposite, SWT.READ_ONLY);
        codeAttachCombo.setLayoutData(new GridData(150, SWT.DEFAULT));
        codeAttachCombo.setToolTipText("Ïó¥Î¶∞ ÌååÏùº Î™©Î°ùÏóêÏÑú ÏÑ†ÌÉù");
        codeAttachCombo.add("ÌååÏùº ÏÑ†ÌÉù...");
        codeAttachCombo.select(0);
        codeAttachCombo.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                if (codeAttachCombo.getSelectionIndex() > 0) {
                    String selected = codeAttachCombo.getText();
                    loadFileContent(selected);
                }
            }
        });
        
        Button refreshButton = new Button(buttonComposite, SWT.PUSH);
        refreshButton.setText("üîÑ");
        refreshButton.setToolTipText("ÌååÏùº Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®");
        refreshButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                refreshCodeContexts();
            }
        });
        
        // Ï¥àÍ∏∞ ÌååÏùº Î™©Î°ù Î°úÎìú
        Display.getDefault().asyncExec(() -> refreshCodeContexts());
    }
    
 // Ï≤®Î∂Ä ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Î©îÏÑúÎìú
    private void updateAttachmentStatus(String fileName, int length) {
        if (fileName != null && !fileName.isEmpty()) {
            attachStatusLabel.setText(String.format("%s (%s)", fileName, formatFileSize(length)));
            attachStatusLabel.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_DARK_GREEN));
            clearAttachButton.setVisible(true);
        } else {
            attachStatusLabel.setText("ÏΩîÎìú Ï≤®Î∂Ä ÏóÜÏùå");
            attachStatusLabel.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_DARK_GRAY));
            clearAttachButton.setVisible(false);
        }
        attachStatusLabel.getParent().layout();
    }
    
    private String formatFileSize(int length) {
        if (length < 1024) {
            return length + " Ïûê";
        } else if (length < 1024 * 1024) {
            return String.format("%.1f KB", length / 1024.0);
        } else {
            return String.format("%.1f MB", length / (1024.0 * 1024));
        }
    }

    // Ï≤®Î∂ÄÎêú ÏΩîÎìú Ï†úÍ±∞
    private void clearAttachedCode() {
        attachedCode = "";
        attachedFileName = "";
        updateAttachmentStatus(null, 0);
        addMessage("üìé Ï≤®Î∂ÄÎêú ÏΩîÎìúÍ∞Ä Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§.", false);
    }
    
    
    private void handleFileSelection() {
        String selected = codeAttachCombo.getText();
        
        if ("None".equals(selected) || selected.startsWith("---")) {
            attachedCode = "";
            return;
        }
        
        if ("Current Selection".equals(selected)) {
            attachCurrentSelection();
        } else if ("Current File".equals(selected)) {
            attachCurrentFile();
        } else {
            // ÌäπÏ†ï ÌååÏùº ÏÑ†ÌÉù
            loadFileContent(selected);
        }
    }
 // ÏÉàÎ°úÏö¥ Î©îÏÑúÎìú: ÌòÑÏû¨ ÏÑ†ÌÉù ÏòÅÏó≠ Ï≤®Î∂Ä
    private void attachCurrentSelection() {
        String selection = contextCollector.getCurrentCodeContext();
        if (!selection.isEmpty()) {
            attachedCode = selection;
            attachedFileName = "ÏÑ†ÌÉùÎêú ÏΩîÎìú";
            updateAttachmentStatus(attachedFileName, selection.length());
            
            // ÏΩîÎìú ÎØ∏Î¶¨Î≥¥Í∏∞ ÌëúÏãú
            String preview = selection.length() > 100 ? 
                selection.substring(0, 100) + "..." : selection;
            addMessage("üìé ÏΩîÎìúÍ∞Ä Ï≤®Î∂ÄÎêòÏóàÏäµÎãàÎã§:\n```\n" + preview + "\n```", false);
        } else {
            MessageDialog.openInformation(getShell(), 
                "ÏΩîÎìú ÏÑ†ÌÉù ÌïÑÏöî", 
                "ÏóêÎîîÌÑ∞ÏóêÏÑú Ï≤®Î∂ÄÌï† ÏΩîÎìúÎ•º Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
        }
    }
 // ÏÉàÎ°úÏö¥ Î©îÏÑúÎìú: ÌòÑÏû¨ ÌååÏùº Ï†ÑÏ≤¥ Ï≤®Î∂Ä
    private void attachCurrentFile() {
        String fileName = contextCollector.getCurrentFileName();
        if (!fileName.isEmpty()) {
            String content = contextCollector.getCurrentFileContent();
            if (!content.isEmpty()) {
                // ÌååÏùº ÌÅ¨Í∏∞ Ï†úÌïú ÌôïÏù∏
                if (content.length() > 100000) { // 100KB Ï†úÌïú
                    boolean confirm = MessageDialog.openConfirm(getShell(),
                        "ÌÅ∞ ÌååÏùº Ï≤®Î∂Ä",
                        String.format("ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÌÅΩÎãàÎã§ (%s). Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?", 
                            formatFileSize(content.length())));
                    if (!confirm) return;
                }
                
                attachedCode = content;
                attachedFileName = fileName;
                updateAttachmentStatus(fileName, content.length());
                addMessage("üìé ÌååÏùºÏù¥ Ï≤®Î∂ÄÎêòÏóàÏäµÎãàÎã§: " + fileName, false);
            } else {
                MessageDialog.openError(getShell(), 
                    "ÌååÏùº ÏùΩÍ∏∞ Ïã§Ìå®", 
                    "ÌååÏùº ÎÇ¥Ïö©ÏùÑ ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
            }
        } else {
            MessageDialog.openInformation(getShell(), 
                "ÌååÏùº ÏóÜÏùå", 
                "ÌòÑÏû¨ Ïó¥Î†§ÏûàÎäî ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§.");
        }
    }

    // ÏÉàÎ°úÏö¥ Î©îÏÑúÎìú: ÌäπÏ†ï ÌååÏùº ÎÇ¥Ïö© Î°úÎìú
    private void loadFileContent(String fileName) {
        Job job = new Job("Loading file: " + fileName) {
            @Override
            protected IStatus run(IProgressMonitor monitor) {
                try {
                    String content = contextCollector.getFileContent(fileName);
                    
                    Display.getDefault().asyncExec(() -> {
                        if (!content.isEmpty()) {
                            attachedCode = content;
                            addMessage("üìé ÌååÏùºÏù¥ Ï≤®Î∂ÄÎêòÏóàÏäµÎãàÎã§: " + fileName + " (" + content.length() + " Î¨∏Ïûê)", false);
                        } else {
                            addMessage("‚ùå ÌååÏùº ÎÇ¥Ïö©ÏùÑ ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: " + fileName, false);
                        }
                    });
                    
                    return Status.OK_STATUS;
                    
                } catch (Exception e) {
                    Display.getDefault().asyncExec(() -> {
                        addMessage("‚ùå ÌååÏùº Î°úÎìú Ïã§Ìå®: " + e.getMessage(), false);
                    });
                    return Status.error("Failed to load file", e);
                }
            }
        };
        
        job.setUser(false);
        job.schedule();
    }
    
    private void attachSelectedFile() {
        String selected = codeAttachCombo.getText();
        if (!"None".equals(selected) && !selected.startsWith("---")) {
            handleFileSelection();
        } else {
            addMessage("‚ùå Ï≤®Î∂ÄÌï† ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.", false);
        }
    }
    
    private String getFileExtension(String fileName) {
        if (fileName == null || fileName.equals("ÏÑ†ÌÉùÎêú ÏΩîÎìú")) return "";
        int lastDot = fileName.lastIndexOf('.');
        if (lastDot > 0 && lastDot < fileName.length() - 1) {
            return fileName.substring(lastDot + 1).toLowerCase();
        }
        return "";
    }
    
    private void createSendArea() {
        Composite sendComposite = new Composite(inputComposite, SWT.NONE);
        sendComposite.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
        sendComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        
        GridLayout sendLayout = new GridLayout(3, false);
        sendLayout.marginWidth = 0;
        sendLayout.marginHeight = 0;
        sendLayout.horizontalSpacing = 10;
        sendComposite.setLayout(sendLayout);
        
        characterCountLabel = new Label(sendComposite, SWT.NONE);
        characterCountLabel.setText("0 characters");
        characterCountLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
        characterCountLabel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        
        Button clearInputButton = new Button(sendComposite, SWT.PUSH);
        clearInputButton.setText("Clear");
        clearInputButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                inputText.setText("");
                inputText.setFocus();
            }
        });
        
        sendButton = new Button(sendComposite, SWT.PUSH);
        sendButton.setText("Ï†ÑÏÜ° (Ctrl+Enter)");
        sendButton.setEnabled(true);
        sendButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                sendMessage();
            }
        });
    }
    
    private void sendMessage() {
        String message = inputText.getText().trim();
        if (message.isEmpty() || message.equals("ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî...") || isProcessing) {
            return;
        }

        if (!preferenceManager.hasValidAPIKey()) {
            addMessage("‚ùå API ÌÇ§Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî. SettingsÏóêÏÑú ÏÑ§Ï†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.", false);
            openSettingsDialog();
            return;
        }

        setProcessingState(true);

        String fullMessage = message;
        if (!attachedCode.isEmpty()) {
            fullMessage += "\n\nüìé Ï≤®Î∂ÄÎêú ÏΩîÎìú:\n```\n" + attachedCode + "\n```";
        }

        addMessage("üë§ " + message, true);
        conversationManager.addMessage(currentSessionId, message, true);

        String selectedModel = getSelectedModelId();
        String context = getCurrentContext();

        // ÎπÑÎèôÍ∏∞ Î∞©ÏãùÏúºÎ°ú LLMClient Ìò∏Ï∂ú
        agentOrchestrator.processComplexRequestAsync(fullMessage, context, selectedModel,
            response -> {
                // ÏÑ±Í≥µ ÏΩúÎ∞± (UI Ïä§Î†àÎìúÏóêÏÑú ÏïàÏ†ÑÌïòÍ≤å Ïã§ÌñâÎê®)
                Display.getDefault().asyncExec(() -> {
                    if (chatContent.isDisposed()) return;
                    addMessage("ü§ñ " + response, false);
                    conversationManager.addMessage(currentSessionId, response, false);
                    setProcessingState(false);
                    inputText.setText("");
                    attachedCode = "";
                });
            },
            error -> {
                // Ïã§Ìå® ÏΩúÎ∞± (UI Ïä§Î†àÎìúÏóêÏÑú ÏïàÏ†ÑÌïòÍ≤å Ïã§ÌñâÎê®)
                Display.getDefault().asyncExec(() -> {
                    if (chatContent.isDisposed()) return;
                    String errorMessage = "‚ùå Ïò§Î•ò: " + error.getMessage();
                    addMessage(errorMessage, false);
                    setProcessingState(false);
                    CopilotLogger.error("Message processing failed", error);
                });
            }
        );
    }
    
    private void setProcessingState(boolean processing) {
        isProcessing = processing;
        sendButton.setEnabled(!processing);
        inputText.setEditable(!processing);
        if (processing) {
            statusLabel.setText("Processing...");
        } else {
            statusLabel.setText("Ready");
        }
    }
    
    private void addMessage(String content, boolean isUser) {
        MessageBubble bubble = new MessageBubble(chatContent, SWT.NONE);
        bubble.setMessage(content, isUser);
        bubble.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));
        
        // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÌëúÏãú
        if (preferenceManager.isShowTimestamps()) {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            bubble.setTimestamp(sdf.format(new Date()));
        }
        
        chatContent.layout();
        chatScrolled.setMinSize(chatContent.computeSize(
            chatScrolled.getClientArea().width, SWT.DEFAULT));
        
        if (preferenceManager.isAutoScrollEnabled()) {
            scrollToBottom();
        }
    }
    
    private void addWelcomeMessage() {
        String welcomeMsg = """
            üéØ **Multi-Agent REACT AI Assistant**
            
            ÌôòÏòÅÌï©ÎãàÎã§! Ï†ÄÎäî Ïó¨Îü¨ Ï†ÑÎ¨∏ ÏóêÏù¥Ï†ÑÌä∏Í∞Ä ÌòëÎ†•ÌïòÎäî AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§.
            
            **ü§ñ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏóêÏù¥Ï†ÑÌä∏:**
            ‚Ä¢ **CodingAgent** - ÏΩîÎìú ÏûëÏÑ±, Î¶¨Î∑∞, ÎîîÎ≤ÑÍπÖ
            ‚Ä¢ **McpAgent** - Ïô∏Î∂Ä ÎèÑÍµ¨ Ïó∞Îèô (ÌååÏùº, Git, DB Îì±)
            ‚Ä¢ **GeneralAgent** - ÏùºÎ∞ò ÏßàÎ¨∏ Î∞è ÎåÄÌôî
            
            **‚å®Ô∏è Îã®Ï∂ïÌÇ§:**
            ‚Ä¢ `Ctrl + Enter` - Î©îÏãúÏßÄ Ï†ÑÏÜ°
            ‚Ä¢ `Ctrl + Alt + F` - Ï±ÑÌåÖ Ï∞Ω Ïó¥Í∏∞
            
            **üí° ÌåÅ:** ÏΩîÎìú ÏÑ†ÌÉù ÌõÑ üìé Î≤ÑÌäºÏúºÎ°ú Ï≤®Î∂Ä Í∞ÄÎä•
            """;
        
        addMessage(welcomeMsg, false);
        
        // API ÌÇ§ ÏÉÅÌÉú ÌôïÏù∏
        if (!preferenceManager.hasValidAPIKey()) {
            addMessage("‚ö†Ô∏è API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. SettingsÏóêÏÑú ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.", false);
        }
    }
    
    private void scrollToBottom() {
        Display.getDefault().asyncExec(() -> {
            if (!chatScrolled.isDisposed()) {
                Point origin = chatScrolled.getOrigin();
                Point size = chatContent.getSize();
                chatScrolled.setOrigin(origin.x, size.y);
            }
        });
    }
    
    private void updateCharacterCount() {
        if (!characterCountLabel.isDisposed() && !inputText.isDisposed()) {
            int count = inputText.getText().length();
            characterCountLabel.setText(count + " characters");
            
            // Í∏ÄÏûê Ïàò Ï†úÌïú Í≤ΩÍ≥†
            if (count > 4000) {
                characterCountLabel.setForeground(
                    Display.getDefault().getSystemColor(SWT.COLOR_RED));
            } else {
                characterCountLabel.setForeground(
                    Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_FOREGROUND));
            }
        }
    }
    
    private void openSettingsDialog() {
        SettingsDialog dialog = new SettingsDialog(getSite().getShell());
        if (dialog.open() == Window.OK) {
            loadInitialData();
            loadAvailableModels();
            addMessage("‚úÖ ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.", false);
            CopilotLogger.info("Settings updated");
        }
    }
    
    private void openMCPDialog() {
        MCPManagerDialog dialog = new MCPManagerDialog(getSite().getShell());
        dialog.open();
    }
    
    private void openSnippetDialog() {
        SnippetDialog dialog = new SnippetDialog(getSite().getShell(), snippetManager);
        if (dialog.open() == Window.OK) {
            String selectedSnippet = dialog.getSelectedSnippet();
            if (selectedSnippet != null) {
                inputText.insert(selectedSnippet);
            }
        }
    }
    
    private void loadAvailableModels() {
        modelCombo.setEnabled(false);
        modelCombo.removeAll();
        modelCombo.add("Loading models...");
        modelCombo.select(0);
        
        llmClient.getAvailableModelsAsync(
            models -> {
                Display.getDefault().asyncExec(() -> {
                    if (!modelCombo.isDisposed()) {
                        modelCombo.removeAll();
                        modelMap.clear();
                        
                        for (ModelInfo model : models) {
                            String displayName = model.isFabriX() ? 
                                "üè≠ " + model.getModelLabel() : 
                                "ü§ñ " + model.getModelLabel();
                            modelCombo.add(displayName);
                            modelMap.put(displayName, model);
                        }
                        
                        if (modelCombo.getItemCount() > 0) {
                            // Í∏∞Î≥∏ Î™®Îç∏ ÏÑ†ÌÉù
                            String defaultModel = preferenceManager.getSelectedModel();
                            int index = 0;
                            for (int i = 0; i < modelCombo.getItemCount(); i++) {
                                ModelInfo model = modelMap.get(modelCombo.getItem(i));
                                if (model != null && model.getModelId().equals(defaultModel)) {
                                    index = i;
                                    break;
                                }
                            }
                            modelCombo.select(index);
                            modelCombo.setEnabled(true);
                        } else {
                            modelCombo.add("No models available");
                            modelCombo.select(0);
                        }
                    }
                });
            },
            error -> {
                Display.getDefault().asyncExec(() -> {
                    if (!modelCombo.isDisposed()) {
                        modelCombo.removeAll();
                        modelCombo.add("Error loading models");
                        modelCombo.select(0);
                        CopilotLogger.error("Failed to load models", error);
                    }
                });
            }
        );
    }
    
    private void handleModelSelection() {
        String selected = modelCombo.getText();
        ModelInfo model = modelMap.get(selected);
        if (model != null) {
            preferenceManager.setSelectedModel(model.getModelId());
            addMessage("‚úÖ Î™®Îç∏ Î≥ÄÍ≤Ω: " + model.getModelLabel(), false);
            CopilotLogger.info("Model changed to: " + model.getModelId());
        }
    }
    
    private String getSelectedModelId() {
        String selected = modelCombo.getText();
        ModelInfo model = modelMap.get(selected);
        return model != null ? model.getModelId() : preferenceManager.getSelectedModel();
    }
    
    private void attachCurrentCode() {
        String code = contextCollector.getCurrentCodeContext();
        if (!code.isEmpty()) {
            attachedCode = code;
            addMessage("üìé ÏΩîÎìúÍ∞Ä Ï≤®Î∂ÄÎêòÏóàÏäµÎãàÎã§ (" + code.length() + " Î¨∏Ïûê)", false);
            
            // Ïä§ÎãàÌé´ÏúºÎ°ú Ï†ÄÏû• ÏòµÏÖò
            if (MessageDialog.openQuestion(getSite().getShell(), 
                "Ïä§ÎãàÌé´ Ï†ÄÏû•", "Ïù¥ ÏΩîÎìúÎ•º Ïä§ÎãàÌé´ÏúºÎ°ú Ï†ÄÏû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) {
                String name = InputDialog.open(getSite().getShell(), 
                    "Ïä§ÎãàÌé´ Ïù¥Î¶Ñ", "Ïä§ÎãàÌé´ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:");
                if (name != null && !name.isEmpty()) {
                    String language = contextCollector.getCurrentFileLanguage();
                    snippetManager.saveSnippet(name, code, language);
                    addMessage("‚úÖ Ïä§ÎãàÌé´Ïù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§: " + name, false);
                }
            }
        } else {
            addMessage("‚ùå ÏÑ†ÌÉùÎêú ÏΩîÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏóêÎîîÌÑ∞ÏóêÏÑú ÏΩîÎìúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.", false);
        }
    }
    
 // ChatView.javaÏùò refreshCodeContexts Î©îÏÑúÎìú ÏàòÏ†ï
    private void refreshCodeContexts() {
        codeAttachCombo.setEnabled(false);
        
        Job job = new Job("ÌååÏùº Î™©Î°ù Î°úÎìú Ï§ë...") {
            @Override
            protected IStatus run(IProgressMonitor monitor) {
                try {
                    List<String> openFiles = contextCollector.getOpenFileNames();
                    
                    Display.getDefault().asyncExec(() -> {
                        if (codeAttachCombo.isDisposed()) return;
                        
                        codeAttachCombo.removeAll();
                        codeAttachCombo.add("ÌååÏùº ÏÑ†ÌÉù...");
                        
                        if (!openFiles.isEmpty()) {
                            for (String file : openFiles) {
                                codeAttachCombo.add(file);
                            }
                        }
                        
                        codeAttachCombo.select(0);
                        codeAttachCombo.setEnabled(true);
                    });
                    
                    return Status.OK_STATUS;
                } catch (Exception e) {
                    Display.getDefault().asyncExec(() -> {
                        codeAttachCombo.setEnabled(true);
                    });
                    return Status.error("ÌååÏùº Î™©Î°ù Î°úÎìú Ïã§Ìå®", e);
                }
            }
        };
        
        job.setUser(false);
        job.schedule();
    }
    
    private void exportChatHistory() {
        if (conversationManager.getConversationHistory(currentSessionId).isEmpty()) {
            addMessage("‚ùå ÎÇ¥Î≥¥ÎÇº ÎåÄÌôîÍ∞Ä ÏóÜÏäµÎãàÎã§.", false);
            return;
        }
        
        FileDialog dialog = new FileDialog(getSite().getShell(), SWT.SAVE);
        dialog.setFilterExtensions(new String[]{"*.md", "*.txt", "*.json", "*.html"});
        dialog.setFilterNames(new String[]{"Markdown", "Plain Text", "JSON", "HTML"});
        dialog.setFileName("chat-export-" + new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date()));
        
        String path = dialog.open();
        if (path != null) {
            try {
                List<ConversationManager.Message> messages = 
                    conversationManager.getConversationHistory(currentSessionId);
                
                ChatExporter.ExportFormat format = determineFormat(path);
                String content = formatMessages(messages, format);
                
                Files.write(Paths.get(path), content.getBytes());
                addMessage("‚úÖ ÎåÄÌôîÍ∞Ä ÎÇ¥Î≥¥ÎÇ¥Ï°åÏäµÎãàÎã§: " + path, false);
                CopilotLogger.info("Chat exported to: " + path);
                
            } catch (IOException e) {
                addMessage("‚ùå ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®: " + e.getMessage(), false);
                CopilotLogger.error("Export failed", e);
            }
        }
    }
    
    private ChatExporter.ExportFormat determineFormat(String path) {
        if (path.endsWith(".md")) return ChatExporter.ExportFormat.MARKDOWN;
        if (path.endsWith(".json")) return ChatExporter.ExportFormat.JSON;
        if (path.endsWith(".html")) return ChatExporter.ExportFormat.HTML;
        return ChatExporter.ExportFormat.PLAIN_TEXT;
    }
    
    private String formatMessages(List<ConversationManager.Message> messages, ChatExporter.ExportFormat format) {
        ChatExporter exporter = new ChatExporter();
        return exporter.export(messages, format);
    }
    
    private void startNewConversation() {
        if (!conversationManager.getConversationHistory(currentSessionId).isEmpty()) {
            boolean confirm = MessageDialog.openConfirm(getSite().getShell(), 
                "ÏÉà ÎåÄÌôî", "ÌòÑÏû¨ ÎåÄÌôîÎ•º Ï†ÄÏû•ÌïòÍ≥† ÏÉà ÎåÄÌôîÎ•º ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
            if (!confirm) return;
        }
        
        currentSessionId = conversationManager.startNewConversation();
        clearChat();
        addWelcomeMessage();
        CopilotLogger.info("New conversation started: " + currentSessionId);
    }
    
    private void showConversationHistory() {
        ConversationHistoryDialog dialog = new ConversationHistoryDialog(
            getSite().getShell(), conversationManager);
        
        if (dialog.open() == Window.OK) {
            String selectedSessionId = dialog.getSelectedSessionId();
            if (selectedSessionId != null && !selectedSessionId.equals(currentSessionId)) {
                currentSessionId = selectedSessionId;
                loadConversation(selectedSessionId);
            }
        }
    }
    
    private void loadConversation(String sessionId) {
        clearChat();
        List<ConversationManager.Message> messages = 
            conversationManager.getConversationHistory(sessionId);
        
        for (ConversationManager.Message msg : messages) {
            addMessage(msg.content, msg.isUser);
        }
        
        addMessage("üìÇ Ïù¥Ï†Ñ ÎåÄÌôîÎ•º Î∂àÎü¨ÏôîÏäµÎãàÎã§.", false);
    }
    
    private void clearChat() {
        for (Control child : chatContent.getChildren()) {
            child.dispose();
        }
        chatContent.layout();
        chatScrolled.setMinSize(chatContent.computeSize(SWT.DEFAULT, SWT.DEFAULT));
    }
    
    private void clearChatHistory() {
        boolean confirm = MessageDialog.openConfirm(getSite().getShell(), 
            "ÎåÄÌôî ÏÇ≠Ï†ú", "ÌòÑÏû¨ ÎåÄÌôîÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
        if (confirm) {
            conversationManager.clearConversation(currentSessionId);
            clearChat();
            addMessage("üóëÔ∏è ÎåÄÌôîÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.", false);
            CopilotLogger.info("Conversation cleared: " + currentSessionId);
        }
    }
    
    private String getCurrentContext() {
        StringBuilder context = new StringBuilder();
        
        // ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏
        context.append("ÌîÑÎ°úÏ†ùÌä∏: ").append(contextCollector.getProjectContext()).append("\n");
        
        // ÌòÑÏû¨ ÌååÏùº
        String currentFile = contextCollector.getCurrentFileName();
        if (!currentFile.isEmpty()) {
            context.append("ÌòÑÏû¨ ÌååÏùº: ").append(currentFile).append("\n");
        }
        
        // ÏÑ†ÌÉùÎêú ÏΩîÎìú
        String selectedCode = contextCollector.getCurrentCodeContext();
        if (!selectedCode.isEmpty() && selectedCode.length() < 500) {
            context.append("ÏÑ†ÌÉùÎêú ÏΩîÎìú:\n```\n").append(selectedCode).append("\n```\n");
        }
        
        // Ï≤®Î∂ÄÎêú ÏΩîÎìú
        if (!attachedCode.isEmpty()) {
            context.append("Ï≤®Î∂ÄÎêú ÏΩîÎìú:\n```\n").append(attachedCode).append("\n```\n");
        }
        
        return context.toString();
    }
    
    private void updateConnectionStatus() {
        Display.getDefault().timerExec(5000, () -> {
            if (!statusLabel.isDisposed()) {
                boolean hasApi = preferenceManager.hasValidAPIKey();
                McpServerManager.McpStatus mcpStatus = McpServerManager.getInstance().getStatus();
                
                String status = String.format("API: %s | MCP: %d/%d servers", 
                    hasApi ? "‚úÖ" : "‚ùå",
                    mcpStatus.getConnectedServers(),
                    mcpStatus.getTotalServers());
                
                statusLabel.setText(status);
                updateConnectionStatus(); // Ïû¨Í∑Ä Ìò∏Ï∂ú
            }
        });
    }
    
    private void loadInitialData() {
        if (!PreferenceManager.getInstance().hasValidAPIKey()) {
            addMessage("‚ö†Ô∏è API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. SettingsÏóêÏÑú ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.", false);
        } else {
            String apiType = preferenceManager.hasOpenAIKey() ? "OpenAI" : "FabriX";
            addMessage("‚úÖ " + apiType + " API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§.", false);
        }
        
        // MCP ÏÑúÎ≤Ñ ÏÉÅÌÉú
        McpServerManager manager = McpServerManager.getInstance();
        manager.loadLocalMCPConfig();
        
        // ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú Í∏∞Î≥∏ MCP ÏÑúÎ≤Ñ Ï∂îÍ∞Ä
        try {
            com.fabrix.copilot.test.TestMCPSetup.setupTestMCPServers();
        } catch (Exception e) {
            CopilotLogger.warn("Failed to setup test MCP servers: " + e.getMessage());
        }
        
        McpServerManager.McpStatus status = manager.getStatus();
        if (status.getTotalServers() > 0) {
            addMessage(String.format("üîå MCP: %dÍ∞ú ÏÑúÎ≤Ñ Ï§ë %dÍ∞ú Ïó∞Í≤∞Îê®", 
                status.getTotalServers(), status.getConnectedServers()), false);
        }
        
        // Ï¥àÍ∏∞ ÌååÏùº Î™©Î°ù Î°úÎìú
        Display.getDefault().asyncExec(() -> {
            refreshCodeContexts();
        });
    }
    
    @Override
    public void setFocus() {
        if (inputText != null && !inputText.isDisposed()) {
            inputText.setFocus();
        }
    }
    
    @Override
    public void dispose() {
        CopilotLogger.info("ChatView disposing");
        
        // Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨
        if (llmClient != null) {
            llmClient.shutdown();
        }
        
        // Ìè∞Ìä∏ Ï†ïÎ¶¨
        for (Control control : chatContent.getChildren()) {
            if (control instanceof MessageBubble) {
                ((MessageBubble) control).dispose();
            }
        }
        
        super.dispose();
    }
}